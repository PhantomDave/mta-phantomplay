<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.devcontainer/db-init/01-init-phantomplay.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.devcontainer/db-init/01-init-phantomplay.sql" />
              <option name="updatedContent" value="-- MTA PhantomPlay Database Initialization&#10;    price INT DEFAULT 0,&#10;    x FLOAT DEFAULT 0.0,&#10;    y FLOAT DEFAULT 0.0,&#10;    z FLOAT DEFAULT 0.0,&#10;    interior_id INT DEFAULT 0,&#10;    locked BOOLEAN DEFAULT TRUE,&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    FOREIGN KEY (owner_id) REFERENCES characters(id) ON DELETE SET NULL,&#10;    INDEX idx_owner_id (owner_id),&#10;    INDEX idx_type (type)&#10;);&#10;&#10;-- Insert some test data for development&#10;INSERT INTO accounts (username, password, email, serial, admin_level) VALUES &#10;('admin', SHA2('admin123', 256), 'admin@phantomplay.test', 'ADMIN_SERIAL_12345678901234567890', 9),&#10;('testplayer', SHA2('test123', 256), 'test@phantomplay.test', 'TEST_SERIAL_123456789012345678901', 0);&#10;&#10;-- Insert test character for admin&#10;INSERT INTO characters (account_id, name, money, bank_money, x, y, z) VALUES &#10;(1, 'Administrator', 50000, 100000, 1544.0, -1630.0, 13.4);&#10;&#10;-- Insert test character for test player  &#10;INSERT INTO characters (account_id, name, money, bank_money, x, y, z) VALUES &#10;(2, 'TestPlayer', 5000, 10000, 1544.0, -1630.0, 13.4);&#10;&#10;-- Create logs table for debugging&#10;CREATE TABLE IF NOT EXISTS server_logs (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    level ENUM('debug', 'info', 'warning', 'error') DEFAULT 'info',&#10;    message TEXT NOT NULL,&#10;    source VARCHAR(100),&#10;    player_id INT,&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    INDEX idx_level (level),&#10;    INDEX idx_created_at (created_at),&#10;    INDEX idx_player_id (player_id)&#10;);&#10;&#10;-- Create a view for easy character lookup with account info&#10;CREATE VIEW character_details AS&#10;SELECT &#10;    c.id as character_id,&#10;    c.name as character_name,&#10;    c.money,&#10;    c.bank_money,&#10;    c.health,&#10;    c.armor,&#10;    c.x, c.y, c.z,&#10;    c.play_time,&#10;    a.username,&#10;    a.email,&#10;    a.admin_level,&#10;    a.last_login as account_last_login&#10;FROM characters c&#10;JOIN accounts a ON c.account_id = a.id;&#10;&#10;-- Grant necessary permissions&#10;GRANT ALL PRIVILEGES ON mta_sa.* TO 'my_user'@'%';&#10;FLUSH PRIVILEGES;&#10;&#10;-- Log successful initialization&#10;INSERT INTO server_logs (level, message, source) VALUES &#10;('info', 'Database initialization completed successfully', 'init_script');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.devcontainer/devcontainer.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.devcontainer/devcontainer.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;MTA PhantomPlay Development&quot;,&#10;  &quot;dockerComposeFile&quot;: [&quot;../docker-compose.yml&quot;, &quot;docker-compose.override.yml&quot;],&#10;  &quot;service&quot;: &quot;mta-server&quot;,&#10;  &quot;workspaceFolder&quot;: &quot;/workspace&quot;,&#10;  &quot;shutdownAction&quot;: &quot;stopCompose&quot;,&#10;&#10;  &quot;features&quot;: {&#10;    &quot;ghcr.io/devcontainers/features/git:1&quot;: {},&#10;    &quot;ghcr.io/devcontainers/features/common-utils:2&quot;: {&#10;      &quot;installZsh&quot;: true,&#10;      &quot;configureZshAsDefaultShell&quot;: true,&#10;      &quot;installOhMyZsh&quot;: true,&#10;      &quot;installOhMyZshConfig&quot;: true,&#10;      &quot;upgradePackages&quot;: true&#10;    }&#10;  },&#10;&#10;  &quot;customizations&quot;: {&#10;    &quot;vscode&quot;: {&#10;      &quot;extensions&quot;: [&#10;        &quot;ms-vscode.vscode-lua&quot;,&#10;        &quot;sumneko.lua&quot;,&#10;        &quot;formulahendry.code-runner&quot;,&#10;        &quot;ms-vscode.vscode-json&quot;,&#10;        &quot;redhat.vscode-yaml&quot;,&#10;        &quot;ms-vscode.vscode-xml&quot;,&#10;        &quot;streetsidesoftware.code-spell-checker&quot;,&#10;        &quot;eamodio.gitlens&quot;&#10;      ],&#10;      &quot;settings&quot;: {&#10;        &quot;terminal.integrated.defaultProfile.linux&quot;: &quot;zsh&quot;,&#10;        &quot;Lua.workspace.library&quot;: [&#10;          &quot;/opt/mta/mods/deathmatch/resources&quot;&#10;        ],&#10;        &quot;Lua.diagnostics.globals&quot;: [&#10;          &quot;addEvent&quot;,&#10;          &quot;addEventHandler&quot;,&#10;          &quot;triggerEvent&quot;,&#10;          &quot;triggerClientEvent&quot;,&#10;          &quot;triggerServerEvent&quot;,&#10;          &quot;outputChatBox&quot;,&#10;          &quot;outputConsole&quot;,&#10;          &quot;outputDebugString&quot;,&#10;          &quot;getPlayerName&quot;,&#10;          &quot;getPlayers&quot;,&#10;          &quot;createElement&quot;,&#10;          &quot;destroyElement&quot;,&#10;          &quot;setElementData&quot;,&#10;          &quot;getElementData&quot;,&#10;          &quot;exports&quot;,&#10;          &quot;resource&quot;,&#10;          &quot;resourceRoot&quot;,&#10;          &quot;root&quot;,&#10;          &quot;localPlayer&quot;,&#10;          &quot;source&quot;,&#10;          &quot;client&quot;,&#10;          &quot;mysql&quot;,&#10;          &quot;dbConnect&quot;,&#10;          &quot;dbQuery&quot;,&#10;          &quot;dbExec&quot;,&#10;          &quot;dbFree&quot;,&#10;          &quot;dbPoll&quot;&#10;        ]&#10;      }&#10;    }&#10;  },&#10;&#10;  &quot;forwardPorts&quot;: [22003, 22126, 22005, 3306, 8080],&#10;  &quot;portsAttributes&quot;: {&#10;    &quot;22003&quot;: {&#10;      &quot;label&quot;: &quot;MTA Server Game Port&quot;,&#10;      &quot;protocol&quot;: &quot;udp&quot;&#10;    },&#10;    &quot;22126&quot;: {&#10;      &quot;label&quot;: &quot;MTA Server HTTP Port&quot;&#10;    },&#10;    &quot;22005&quot;: {&#10;      &quot;label&quot;: &quot;MTA Server ASE Port&quot;&#10;    },&#10;    &quot;3306&quot;: {&#10;      &quot;label&quot;: &quot;MariaDB&quot;&#10;    },&#10;    &quot;8080&quot;: {&#10;      &quot;label&quot;: &quot;phpMyAdmin&quot;&#10;    }&#10;  },&#10;&#10;  &quot;postCreateCommand&quot;: &quot;bash -c 'if [ -f /workspace/.devcontainer/setup.sh ]; then bash /workspace/.devcontainer/setup.sh; else echo \&quot;Setup script not found, running basic setup...\&quot;; sudo apt-get update &amp;&amp; sudo apt-get install -y vim nano htop curl mysql-client; fi'&quot;,&#10;  &quot;postStartCommand&quot;: &quot;bash -c 'if [ -f /workspace/.devcontainer/post-start.sh ]; then bash /workspace/.devcontainer/post-start.sh; fi'&quot;,&#10;&#10;  &quot;remoteUser&quot;: &quot;mtauser&quot;,&#10;  &quot;containerEnv&quot;: {&#10;    &quot;MTA_DEV&quot;: &quot;true&quot;,&#10;    &quot;DATABASE_HOST&quot;: &quot;db&quot;,&#10;    &quot;DATABASE_PORT&quot;: &quot;3306&quot;,&#10;    &quot;DATABASE_NAME&quot;: &quot;mta_sa&quot;,&#10;    &quot;DATABASE_USER&quot;: &quot;my_user&quot;,&#10;    &quot;DATABASE_PASSWORD&quot;: &quot;user_password&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;MTA PhantomPlay Development&quot;,&#10;  &quot;dockerComposeFile&quot;: [&quot;../docker-compose.yml&quot;, &quot;docker-compose.override.yml&quot;],&#10;  &quot;service&quot;: &quot;mta-server&quot;,&#10;  &quot;workspaceFolder&quot;: &quot;/workspace&quot;,&#10;  &quot;shutdownAction&quot;: &quot;stopCompose&quot;,&#10;&#10;  &quot;features&quot;: {&#10;    &quot;ghcr.io/devcontainers/features/git:1&quot;: {},&#10;    &quot;ghcr.io/devcontainers/features/common-utils:2&quot;: {&#10;      &quot;installZsh&quot;: true,&#10;      &quot;configureZshAsDefaultShell&quot;: true,&#10;      &quot;installOhMyZsh&quot;: true,&#10;      &quot;installOhMyZshConfig&quot;: true,&#10;      &quot;upgradePackages&quot;: true&#10;    }&#10;  },&#10;&#10;  &quot;customizations&quot;: {&#10;    &quot;vscode&quot;: {&#10;      &quot;extensions&quot;: [&#10;        &quot;ms-vscode.vscode-lua&quot;,&#10;        &quot;sumneko.lua&quot;,&#10;        &quot;formulahendry.code-runner&quot;,&#10;        &quot;ms-vscode.vscode-json&quot;,&#10;        &quot;redhat.vscode-yaml&quot;,&#10;        &quot;ms-vscode.vscode-xml&quot;,&#10;        &quot;streetsidesoftware.code-spell-checker&quot;,&#10;        &quot;eamodio.gitlens&quot;&#10;      ],&#10;      &quot;settings&quot;: {&#10;        &quot;terminal.integrated.defaultProfile.linux&quot;: &quot;zsh&quot;,&#10;        &quot;terminal.integrated.cwd&quot;: &quot;/workspace&quot;,&#10;        &quot;Lua.workspace.library&quot;: [&#10;          &quot;/opt/mta/mods/deathmatch/resources&quot;&#10;        ],&#10;        &quot;Lua.diagnostics.globals&quot;: [&#10;          &quot;addEvent&quot;,&#10;          &quot;addEventHandler&quot;,&#10;          &quot;triggerEvent&quot;,&#10;          &quot;triggerClientEvent&quot;,&#10;          &quot;triggerServerEvent&quot;,&#10;          &quot;outputChatBox&quot;,&#10;          &quot;outputConsole&quot;,&#10;          &quot;outputDebugString&quot;,&#10;          &quot;getPlayerName&quot;,&#10;          &quot;getPlayers&quot;,&#10;          &quot;createElement&quot;,&#10;          &quot;destroyElement&quot;,&#10;          &quot;setElementData&quot;,&#10;          &quot;getElementData&quot;,&#10;          &quot;exports&quot;,&#10;          &quot;resource&quot;,&#10;          &quot;resourceRoot&quot;,&#10;          &quot;root&quot;,&#10;          &quot;localPlayer&quot;,&#10;          &quot;source&quot;,&#10;          &quot;client&quot;,&#10;          &quot;mysql&quot;,&#10;          &quot;dbConnect&quot;,&#10;          &quot;dbQuery&quot;,&#10;          &quot;dbExec&quot;,&#10;          &quot;dbFree&quot;,&#10;          &quot;dbPoll&quot;&#10;        ]&#10;      }&#10;    }&#10;  },&#10;&#10;  &quot;forwardPorts&quot;: [22003, 22126, 22005, 3306, 8080],&#10;  &quot;portsAttributes&quot;: {&#10;    &quot;22003&quot;: {&#10;      &quot;label&quot;: &quot;MTA Server Game Port&quot;,&#10;      &quot;protocol&quot;: &quot;udp&quot;&#10;    },&#10;    &quot;22126&quot;: {&#10;      &quot;label&quot;: &quot;MTA Server HTTP Port&quot;&#10;    },&#10;    &quot;22005&quot;: {&#10;      &quot;label&quot;: &quot;MTA Server ASE Port&quot;&#10;    },&#10;    &quot;3306&quot;: {&#10;      &quot;label&quot;: &quot;MariaDB&quot;&#10;    },&#10;    &quot;8080&quot;: {&#10;      &quot;label&quot;: &quot;phpMyAdmin&quot;&#10;    }&#10;  },&#10;&#10;  &quot;postCreateCommand&quot;: &quot;bash -c 'if [ -f /workspace/.devcontainer/setup.sh ]; then bash /workspace/.devcontainer/setup.sh; else echo \&quot;Setup script not found, running basic setup...\&quot;; sudo apt-get update &amp;&amp; sudo apt-get install -y vim nano htop curl mysql-client; fi'&quot;,&#10;  &quot;postStartCommand&quot;: &quot;bash -c 'if [ -f /workspace/.devcontainer/post-start.sh ]; then bash /workspace/.devcontainer/post-start.sh; fi'&quot;,&#10;&#10;  &quot;remoteUser&quot;: &quot;mtauser&quot;,&#10;  &quot;containerEnv&quot;: {&#10;    &quot;MTA_DEV&quot;: &quot;true&quot;,&#10;    &quot;DATABASE_HOST&quot;: &quot;db&quot;,&#10;    &quot;DATABASE_PORT&quot;: &quot;3306&quot;,&#10;    &quot;DATABASE_NAME&quot;: &quot;mta_sa&quot;,&#10;    &quot;DATABASE_USER&quot;: &quot;my_user&quot;,&#10;    &quot;DATABASE_PASSWORD&quot;: &quot;user_password&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.devcontainer/docker-compose.override.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.devcontainer/docker-compose.override.yml" />
              <option name="originalContent" value="services:&#10;  mta-server:&#10;    # Override for development - don't restart automatically to allow debugging&#10;    restart: &quot;no&quot;&#10;    # Add development tools and debugging capabilities&#10;    environment:&#10;      - MTA_DEV=true&#10;      - DATABASE_HOST=db&#10;      - DATABASE_PORT=3306&#10;      - DATABASE_NAME=mta_sa&#10;      - DATABASE_USER=my_user&#10;      - DATABASE_PASSWORD=user_password&#10;    # Mount the workspace for live editing&#10;    volumes:&#10;      - ..:/workspace:cached&#10;      - ../phantomplay:/opt/mta/mods/deathmatch/resources/[gamemodes]/phantomplay:cached&#10;      - ../guieditor:/opt/mta/mods/deathmatch/resources/[gamemodes]/guieditor:cached&#10;      - mta-logs:/opt/mta/multitheftauto_linux_x64/mods/deathmatch/logs&#10;    # Keep container running for development&#10;    command: [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;tail -f /dev/null&quot;]&#10;    # Add development labels&#10;    labels:&#10;      - &quot;devcontainer.local_folder=true&quot;&#10;&#10;  # Override database for development with initialization scripts&#10;  db:&#10;    volumes:&#10;      - db_data:/var/lib/mysql&#10;      - ../.devcontainer/db-init:/docker-entrypoint-initdb.d:ro&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root_password&#10;      MYSQL_DATABASE: mta_sa&#10;      MYSQL_USER: my_user&#10;      MYSQL_PASSWORD: user_password&#10;      # Enable general query log for debugging&#10;      MYSQL_ROOT_HOST: &quot;%&quot;&#10;&#10;volumes:&#10;  mta-logs:&#10;    driver: local&#10;" />
              <option name="updatedContent" value="services:&#10;  mta-server:&#10;    # Override for development - don't restart automatically to allow debugging&#10;    restart: &quot;no&quot;&#10;    # Add development tools and debugging capabilities&#10;    environment:&#10;      - MTA_DEV=true&#10;      - DATABASE_HOST=db&#10;      - DATABASE_PORT=3306&#10;      - DATABASE_NAME=mta_sa&#10;      - DATABASE_USER=my_user&#10;      - DATABASE_PASSWORD=user_password&#10;    # Mount the workspace for live editing&#10;    volumes:&#10;      - ..:/workspace:cached&#10;      - mta-logs:/opt/mta/multitheftauto_linux_x64/mods/deathmatch/logs&#10;    # Keep container running for development&#10;    command: [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;tail -f /dev/null&quot;]&#10;    # Add development labels&#10;    labels:&#10;      - &quot;devcontainer.local_folder=true&quot;&#10;&#10;  # Override database for development with initialization scripts&#10;  db:&#10;    volumes:&#10;      - db_data:/var/lib/mysql&#10;      - ../.devcontainer/db-init:/docker-entrypoint-initdb.d:ro&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root_password&#10;      MYSQL_DATABASE: mta_sa&#10;      MYSQL_USER: my_user&#10;      MYSQL_PASSWORD: user_password&#10;      # Enable general query log for debugging&#10;      MYSQL_ROOT_HOST: &quot;%&quot;&#10;&#10;volumes:&#10;  mta-logs:&#10;    driver: local" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.devcontainer/post-start.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.devcontainer/post-start.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;set -e&#10;&#10;echo &quot; Post-start setup for MTA PhantomPlay...&quot;&#10;&#10;# Source the aliases we created&#10;source ~/.bashrc&#10;&#10;# Check if MTA server is running, if not start it&#10;if ! pgrep -f mta-server64 &gt; /dev/null; then&#10;    echo &quot; Starting MTA Server...&quot;&#10;    cd /opt/mta/multitheftauto_linux_x64&#10;    nohup ./mta-server64 &gt; /dev/null 2&gt;&amp;1 &amp;&#10;    sleep 3&#10;    &#10;    if pgrep -f mta-server64 &gt; /dev/null; then&#10;        echo &quot;✅ MTA Server started successfully!&quot;&#10;    else&#10;        echo &quot;❌ Failed to start MTA Server. Check logs with 'mta-logs'&quot;&#10;    fi&#10;else&#10;    echo &quot;✅ MTA Server is already running&quot;&#10;fi&#10;&#10;# Display connection info&#10;echo &quot;&quot;&#10;echo &quot; MTA Server Connection Info:&quot;&#10;echo &quot;  Server: localhost:22003&quot;&#10;echo &quot;  Admin Panel: http://localhost:22126&quot;&#10;echo &quot;&quot;&#10;echo &quot;️ Database Connection Info:&quot;&#10;echo &quot;  Host: db (or localhost from host machine)&quot;&#10;echo &quot;  Port: 3306&quot;&#10;echo &quot;  Database: mta_sa&quot;&#10;echo &quot;  User: my_user&quot;&#10;echo &quot;  Password: user_password&quot;&#10;echo &quot;  phpMyAdmin: http://localhost:8080&quot;&#10;echo &quot;&quot;&#10;echo &quot; Your PhantomPlay code is mounted at:&quot;&#10;echo &quot;  /opt/mta/mods/deathmatch/resources/[gamemodes]/phantomplay&quot;&#10;echo &quot;&quot;&#10;echo &quot; Development environment is ready!&quot;&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;set -e&#10;&#10;echo &quot; Post-start setup for MTA PhantomPlay...&quot;&#10;&#10;# Source the aliases we created for the current shell&#10;if [ -f ~/.zshrc ]; then&#10;    source ~/.zshrc&#10;elif [ -f ~/.bashrc ]; then&#10;    source ~/.bashrc&#10;fi&#10;&#10;# Check if MTA server is running, if not start it&#10;if ! pgrep -f mta-server64 &gt; /dev/null; then&#10;    echo &quot; Starting MTA Server...&quot;&#10;    cd /opt/mta/multitheftauto_linux_x64&#10;    nohup ./mta-server64 &gt; /dev/null 2&gt;&amp;1 &amp;&#10;    sleep 3&#10;    &#10;    if pgrep -f mta-server64 &gt; /dev/null; then&#10;        echo &quot;✅ MTA Server started successfully!&quot;&#10;    else&#10;        echo &quot;❌ Failed to start MTA Server. Check logs with 'mta-logs'&quot;&#10;    fi&#10;else&#10;    echo &quot;✅ MTA Server is already running&quot;&#10;fi&#10;&#10;# Display connection info&#10;echo &quot;&quot;&#10;echo &quot; MTA Server Connection Info:&quot;&#10;echo &quot;  Server: localhost:22003&quot;&#10;echo &quot;  Admin Panel: http://localhost:22126&quot;&#10;echo &quot;&quot;&#10;echo &quot;️ Database Connection Info:&quot;&#10;echo &quot;  Host: db (or localhost from host machine)&quot;&#10;echo &quot;  Port: 3306&quot;&#10;echo &quot;  Database: mta_sa&quot;&#10;echo &quot;  User: my_user&quot;&#10;echo &quot;  Password: user_password&quot;&#10;echo &quot;  phpMyAdmin: http://localhost:8080&quot;&#10;echo &quot;&quot;&#10;echo &quot; Your code locations:&quot;&#10;echo &quot;  Workspace: /workspace&quot;&#10;echo &quot;  PhantomPlay source: /workspace/phantomplay&quot;&#10;echo &quot;  MTA resources: /opt/mta/mods/deathmatch/resources/[gamemodes]/phantomplay&quot;&#10;echo &quot;&quot;&#10;echo &quot; Development environment is ready!&quot;&#10;echo &quot; Use 'workspace' to go to your project root or 'phantomplay' to go to the gamemode folder&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.devcontainer/setup.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.devcontainer/setup.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;set -e&#10;&#10;echo &quot; Setting up MTA PhantomPlay Development Environment...&quot;&#10;&#10;# Create necessary directories first&#10;mkdir -p /workspace/.devcontainer/scripts&#10;mkdir -p /opt/mta/mods/deathmatch/logs&#10;&#10;# Ensure the MTA directory structure exists&#10;sudo mkdir -p /opt/mta/mods/deathmatch/resources/\[gamemodes\]/&#10;sudo mkdir -p /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay&#10;sudo mkdir -p /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor&#10;&#10;# Set up proper permissions for development&#10;sudo chown -R mtauser:mtauser /opt/mta/mods/deathmatch/resources/&#10;sudo chown -R mtauser:mtauser /workspace&#10;sudo chmod -R 755 /opt/mta/mods/deathmatch/resources/&#10;&#10;# Copy gamemode files if they exist in workspace but not in MTA resources&#10;if [ -d &quot;/workspace/phantomplay&quot; ] &amp;&amp; [ ! &quot;$(ls -A /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay 2&gt;/dev/null)&quot; ]; then&#10;    echo &quot; Copying PhantomPlay gamemode files...&quot;&#10;    cp -r /workspace/phantomplay/* /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay/&#10;    sudo chown -R mtauser:mtauser /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay&#10;fi&#10;&#10;if [ -d &quot;/workspace/guieditor&quot; ] &amp;&amp; [ ! &quot;$(ls -A /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor 2&gt;/dev/null)&quot; ]; then&#10;    echo &quot; Copying GUIEditor files...&quot;&#10;    cp -r /workspace/guieditor/* /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor/&#10;    sudo chown -R mtauser:mtauser /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor&#10;fi&#10;&#10;# Create a development configuration if it doesn't exist&#10;if [ ! -f /opt/mta/mods/deathmatch/mtaserver.conf.dev ]; then&#10;    cp /opt/mta/mods/deathmatch/mtaserver.conf /opt/mta/mods/deathmatch/mtaserver.conf.dev&#10;    echo &quot; Created development server configuration&quot;&#10;fi&#10;&#10;# Install development tools&#10;sudo apt-get update -qq&#10;sudo apt-get install -y --no-install-recommends \&#10;    vim \&#10;    nano \&#10;    htop \&#10;    curl \&#10;    jq \&#10;    mysql-client \&#10;    telnet \&#10;    netcat \&#10;    rsync&#10;&#10;# Wait for database to be ready&#10;echo &quot;⏳ Waiting for database to be ready...&quot;&#10;until mysql -h db -u my_user -puser_password -e &quot;SELECT 1&quot; &amp;&gt;/dev/null; do&#10;    echo &quot;Database not ready yet, waiting 2 seconds...&quot;&#10;    sleep 2&#10;done&#10;echo &quot;✅ Database is ready!&quot;&#10;&#10;# Create a simple database test&#10;mysql -h db -u my_user -puser_password mta_sa -e &quot;&#10;CREATE TABLE IF NOT EXISTS test_connection (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    message VARCHAR(255)&#10;);&#10;INSERT INTO test_connection (message) VALUES ('DevContainer setup completed successfully');&#10;&quot;&#10;&#10;echo &quot;✅ Database test table created and populated&quot;&#10;&#10;# Create useful aliases and functions for both bash and zsh&#10;for shell_rc in ~/.bashrc ~/.zshrc; do&#10;    if [ -f &quot;$shell_rc&quot; ]; then&#10;        cat &gt;&gt; $shell_rc &lt;&lt; 'EOF'&#10;&#10;# MTA Development Aliases&#10;alias mta-start='cd /opt/mta/multitheftauto_linux_x64 &amp;&amp; ./mta-server64'&#10;alias mta-logs='tail -f /opt/mta/multitheftauto_linux_x64/mods/deathmatch/logs/server.log'&#10;alias mta-restart='pkill -f mta-server64; sleep 2; mta-start'&#10;alias db-connect='mysql -h db -u my_user -puser_password mta_sa'&#10;alias phantomplay='cd /workspace/phantomplay'&#10;alias workspace='cd /workspace'&#10;alias mta-resources='cd /opt/mta/mods/deathmatch/resources/\[gamemodes\]'&#10;&#10;# Sync functions for development&#10;sync-phantomplay() {&#10;    echo &quot; Syncing PhantomPlay files to MTA resources...&quot;&#10;    rsync -av --delete /workspace/phantomplay/ /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay/&#10;    echo &quot;✅ PhantomPlay files synced!&quot;&#10;}&#10;&#10;sync-guieditor() {&#10;    echo &quot; Syncing GUIEditor files to MTA resources...&quot;&#10;    rsync -av --delete /workspace/guieditor/ /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor/&#10;    echo &quot;✅ GUIEditor files synced!&quot;&#10;}&#10;&#10;sync-all() {&#10;    sync-phantomplay&#10;    sync-guieditor&#10;}&#10;&#10;# Quick functions&#10;mta-status() {&#10;    if pgrep -f mta-server64 &gt; /dev/null; then&#10;        echo &quot;✅ MTA Server is running (PID: $(pgrep -f mta-server64))&quot;&#10;    else&#10;        echo &quot;❌ MTA Server is not running&quot;&#10;    fi&#10;}&#10;&#10;mta-list-resources() {&#10;    echo &quot; Available resources:&quot;&#10;    ls -la /opt/mta/mods/deathmatch/resources/&#10;    echo &quot;&quot;&#10;    echo &quot; Gamemodes:&quot;&#10;    ls -la /opt/mta/mods/deathmatch/resources/\[gamemodes\]/&#10;}&#10;EOF&#10;    fi&#10;done&#10;&#10;echo &quot; MTA PhantomPlay development environment setup completed!&quot;&#10;echo &quot;&quot;&#10;echo &quot; Useful commands:&quot;&#10;echo &quot;  mta-start          - Start MTA server&quot;&#10;echo &quot;  mta-logs           - View server logs&quot;  &#10;echo &quot;  mta-restart        - Restart MTA server&quot;&#10;echo &quot;  mta-status         - Check server status&quot;&#10;echo &quot;  db-connect         - Connect to database&quot;&#10;echo &quot;  phantomplay        - Navigate to PhantomPlay directory&quot;&#10;echo &quot;  workspace          - Navigate to workspace root&quot;&#10;echo &quot;  mta-resources      - Navigate to MTA resources directory&quot;&#10;echo &quot;  sync-phantomplay   - Sync PhantomPlay files to MTA&quot;&#10;echo &quot;  sync-guieditor     - Sync GUIEditor files to MTA&quot;&#10;echo &quot;  sync-all           - Sync all gamemode files&quot;&#10;echo &quot;&quot;&#10;echo &quot; Ports:&quot;&#10;echo &quot;  22003 (UDP)   - MTA Game Port&quot;&#10;echo &quot;  22126 (TCP)   - MTA HTTP Port&quot; &#10;echo &quot;  3306 (TCP)    - MariaDB&quot;&#10;echo &quot;  8080 (TCP)    - phpMyAdmin&quot;&#10;echo &quot;&quot;&#10;echo &quot; File locations:&quot;&#10;echo &quot;  Source files:      /workspace/phantomplay, /workspace/guieditor&quot;&#10;echo &quot;  MTA resources:     /opt/mta/mods/deathmatch/resources/[gamemodes]/&quot;&#10;echo &quot;&quot;&#10;echo &quot; Note: Use 'sync-all' to copy your changes to the MTA server directories&quot;&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;set -e&#10;&#10;echo &quot; Setting up MTA PhantomPlay Development Environment...&quot;&#10;&#10;# Create necessary directories first&#10;mkdir -p /workspace/.devcontainer/scripts&#10;mkdir -p /opt/mta/mods/deathmatch/logs&#10;&#10;# Ensure the MTA directory structure exists&#10;sudo mkdir -p /opt/mta/mods/deathmatch/resources/\[gamemodes\]/&#10;sudo mkdir -p /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay&#10;sudo mkdir -p /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor&#10;&#10;# Set up proper permissions for development&#10;sudo chown -R mtauser:mtauser /opt/mta/mods/deathmatch/resources/&#10;sudo chown -R mtauser:mtauser /workspace&#10;sudo chmod -R 755 /opt/mta/mods/deathmatch/resources/&#10;&#10;# Copy gamemode files if they exist in workspace but not in MTA resources&#10;# Check multiple possible locations for the source files&#10;PHANTOMPLAY_SOURCE=&quot;&quot;&#10;GUIEDITOR_SOURCE=&quot;&quot;&#10;&#10;# Look for phantomplay source files&#10;if [ -d &quot;/workspace/mta-phantomplay/phantomplay&quot; ]; then&#10;    PHANTOMPLAY_SOURCE=&quot;/workspace/mta-phantomplay/phantomplay&quot;&#10;elif [ -d &quot;/workspace/phantomplay&quot; ]; then&#10;    PHANTOMPLAY_SOURCE=&quot;/workspace/phantomplay&quot;&#10;fi&#10;&#10;# Look for guieditor source files&#10;if [ -d &quot;/workspace/mta-phantomplay/guieditor&quot; ]; then&#10;    GUIEDITOR_SOURCE=&quot;/workspace/mta-phantomplay/guieditor&quot;&#10;elif [ -d &quot;/workspace/guieditor&quot; ]; then&#10;    GUIEDITOR_SOURCE=&quot;/workspace/guieditor&quot;&#10;fi&#10;&#10;# Copy PhantomPlay files if source found and destination is empty&#10;if [ -n &quot;$PHANTOMPLAY_SOURCE&quot; ] &amp;&amp; [ ! &quot;$(ls -A /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay 2&gt;/dev/null)&quot; ]; then&#10;    echo &quot; Copying PhantomPlay gamemode files from $PHANTOMPLAY_SOURCE...&quot;&#10;    cp -r &quot;$PHANTOMPLAY_SOURCE&quot;/* /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay/&#10;    sudo chown -R mtauser:mtauser /opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay&#10;    echo &quot;✅ PhantomPlay files copied successfully!&quot;&#10;else&#10;    echo &quot;⚠️  PhantomPlay source not found or already exists in MTA resources&quot;&#10;fi&#10;&#10;# Copy GUIEditor files if source found and destination is empty&#10;if [ -n &quot;$GUIEDITOR_SOURCE&quot; ] &amp;&amp; [ ! &quot;$(ls -A /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor 2&gt;/dev/null)&quot; ]; then&#10;    echo &quot; Copying GUIEditor files from $GUIEDITOR_SOURCE...&quot;&#10;    cp -r &quot;$GUIEDITOR_SOURCE&quot;/* /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor/&#10;    sudo chown -R mtauser:mtauser /opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor&#10;    echo &quot;✅ GUIEditor files copied successfully!&quot;&#10;else&#10;    echo &quot;⚠️  GUIEditor source not found or already exists in MTA resources&quot;&#10;fi&#10;&#10;# Create a development configuration if it doesn't exist&#10;if [ ! -f /opt/mta/mods/deathmatch/mtaserver.conf.dev ]; then&#10;    cp /opt/mta/mods/deathmatch/mtaserver.conf /opt/mta/mods/deathmatch/mtaserver.conf.dev&#10;    echo &quot; Created development server configuration&quot;&#10;fi&#10;&#10;# Install development tools&#10;sudo apt-get update -qq&#10;sudo apt-get install -y --no-install-recommends \&#10;    vim \&#10;    nano \&#10;    htop \&#10;    curl \&#10;    jq \&#10;    mysql-client \&#10;    telnet \&#10;    netcat \&#10;    rsync&#10;&#10;# Wait for database to be ready&#10;echo &quot;⏳ Waiting for database to be ready...&quot;&#10;until mysql -h db -u my_user -puser_password -e &quot;SELECT 1&quot; &amp;&gt;/dev/null; do&#10;    echo &quot;Database not ready yet, waiting 2 seconds...&quot;&#10;    sleep 2&#10;done&#10;echo &quot;✅ Database is ready!&quot;&#10;&#10;# Create a simple database test&#10;mysql -h db -u my_user -puser_password mta_sa -e &quot;&#10;CREATE TABLE IF NOT EXISTS test_connection (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    message VARCHAR(255)&#10;);&#10;INSERT INTO test_connection (message) VALUES ('DevContainer setup completed successfully');&#10;&quot;&#10;&#10;echo &quot;✅ Database test table created and populated&quot;&#10;&#10;# Create useful aliases and functions for both bash and zsh&#10;for shell_rc in ~/.bashrc ~/.zshrc; do&#10;    if [ -f &quot;$shell_rc&quot; ]; then&#10;        cat &gt;&gt; $shell_rc &lt;&lt; 'EOF'&#10;&#10;# MTA Development Aliases&#10;alias mta-start='cd /opt/mta/multitheftauto_linux_x64 &amp;&amp; ./mta-server64'&#10;alias mta-logs='tail -f /opt/mta/multitheftauto_linux_x64/mods/deathmatch/logs/server.log'&#10;alias mta-restart='pkill -f mta-server64; sleep 2; mta-start'&#10;alias db-connect='mysql -h db -u my_user -puser_password mta_sa'&#10;alias phantomplay='cd /workspace/mta-phantomplay/phantomplay'&#10;alias guieditor='cd /workspace/mta-phantomplay/guieditor'&#10;alias workspace='cd /workspace'&#10;alias project='cd /workspace/mta-phantomplay'&#10;alias mta-resources='cd /opt/mta/mods/deathmatch/resources/\[gamemodes\]'&#10;&#10;# Sync functions for development - updated to use correct paths&#10;sync-phantomplay() {&#10;    local source_dir=&quot;/workspace/mta-phantomplay/phantomplay&quot;&#10;    local dest_dir=&quot;/opt/mta/mods/deathmatch/resources/\[gamemodes\]/phantomplay&quot;&#10;    &#10;    if [ -d &quot;$source_dir&quot; ]; then&#10;        echo &quot; Syncing PhantomPlay files from $source_dir to MTA resources...&quot;&#10;        rsync -av --delete &quot;$source_dir/&quot; &quot;$dest_dir/&quot;&#10;        echo &quot;✅ PhantomPlay files synced!&quot;&#10;    else&#10;        echo &quot;❌ PhantomPlay source directory not found: $source_dir&quot;&#10;    fi&#10;}&#10;&#10;sync-guieditor() {&#10;    local source_dir=&quot;/workspace/mta-phantomplay/guieditor&quot;&#10;    local dest_dir=&quot;/opt/mta/mods/deathmatch/resources/\[gamemodes\]/guieditor&quot;&#10;    &#10;    if [ -d &quot;$source_dir&quot; ]; then&#10;        echo &quot; Syncing GUIEditor files from $source_dir to MTA resources...&quot;&#10;        rsync -av --delete &quot;$source_dir/&quot; &quot;$dest_dir/&quot;&#10;        echo &quot;✅ GUIEditor files synced!&quot;&#10;    else&#10;        echo &quot;❌ GUIEditor source directory not found: $source_dir&quot;&#10;    fi&#10;}&#10;&#10;sync-all() {&#10;    sync-phantomplay&#10;    sync-guieditor&#10;}&#10;&#10;# Quick functions&#10;mta-status() {&#10;    if pgrep -f mta-server64 &gt; /dev/null; then&#10;        echo &quot;✅ MTA Server is running (PID: $(pgrep -f mta-server64))&quot;&#10;    else&#10;        echo &quot;❌ MTA Server is not running&quot;&#10;    fi&#10;}&#10;&#10;mta-list-resources() {&#10;    echo &quot; Available resources:&quot;&#10;    ls -la /opt/mta/mods/deathmatch/resources/&#10;    echo &quot;&quot;&#10;    echo &quot; Gamemodes:&quot;&#10;    ls -la /opt/mta/mods/deathmatch/resources/\[gamemodes\]/&#10;}&#10;EOF&#10;    fi&#10;done&#10;&#10;echo &quot; MTA PhantomPlay development environment setup completed!&quot;&#10;echo &quot;&quot;&#10;echo &quot; Useful commands:&quot;&#10;echo &quot;  mta-start          - Start MTA server&quot;&#10;echo &quot;  mta-logs           - View server logs&quot;  &#10;echo &quot;  mta-restart        - Restart MTA server&quot;&#10;echo &quot;  mta-status         - Check server status&quot;&#10;echo &quot;  db-connect         - Connect to database&quot;&#10;echo &quot;  phantomplay        - Navigate to PhantomPlay directory&quot;&#10;echo &quot;  workspace          - Navigate to workspace root&quot;&#10;echo &quot;  mta-resources      - Navigate to MTA resources directory&quot;&#10;echo &quot;  sync-phantomplay   - Sync PhantomPlay files to MTA&quot;&#10;echo &quot;  sync-guieditor     - Sync GUIEditor files to MTA&quot;&#10;echo &quot;  sync-all           - Sync all gamemode files&quot;&#10;echo &quot;&quot;&#10;echo &quot; Ports:&quot;&#10;echo &quot;  22003 (UDP)   - MTA Game Port&quot;&#10;echo &quot;  22126 (TCP)   - MTA HTTP Port&quot; &#10;echo &quot;  3306 (TCP)    - MariaDB&quot;&#10;echo &quot;  8080 (TCP)    - phpMyAdmin&quot;&#10;echo &quot;&quot;&#10;echo &quot; File locations:&quot;&#10;echo &quot;  Source files:      /workspace/phantomplay, /workspace/guieditor&quot;&#10;echo &quot;  MTA resources:     /opt/mta/mods/deathmatch/resources/[gamemodes]/&quot;&#10;echo &quot;&quot;&#10;echo &quot; Note: Use 'sync-all' to copy your changes to the MTA server directories&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>